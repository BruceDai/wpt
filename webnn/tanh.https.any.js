// META: title=test WebNN API tanh operation
// META: global=window,dedicatedworker
// META: script=/resources/testharness.js
// META: script=./resources/utils.js
// META: timeout=long

'use strict';

// https://webmachinelearning.github.io/webnn/#api-mlgraphbuilder-tanh

let context;
let builder;

async function testTanh(operandType, syncFlag, input, expected, shape) {
  const x = builder.input('x', {type: operandType, dimensions: shape});
  const y = builder.tanh(x);
  const TestTypedArray = TypedArrayDict[operandType];
  const inputs = {'x': new TestTypedArray(input)};
  const outputs = {'y': new TestTypedArray(sizeOfShape(shape))};
  let graph;

  if (syncFlag) {
    graph = builder.build({y});
    context.compute(graph, inputs, outputs);
  } else {
    graph = await builder.buildAsync({y});
    await context.computeAsync(graph, inputs, outputs);
  }

  assert_array_approx_equals(outputs.y, expected[operandType], PrecisionMetrics.ATOL[operandType].tanh, `test tanh ${operandType}`);
}

// Input data are random float64 numbers between [-Math.PI, Math.PI) generated by invoking getRandomArbitrary(-Math.PI, Math.PI)
// refering to https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random#getting_a_random_number_between_two_values
const inputData = [
  -0.14288966605708087, 1.7064634065031914,  -2.6298979560931333, -0.4746301774847992,
  2.1815683248251636,   1.3929699402588236,  2.08174053998967,    -2.3870430475881523,
  -2.477734890491838,   -3.0298075450912583, -2.2217492905144107, -3.0717260174777667,
  -1.8402518320294305,  1.5762004395036149,  1.8019519783766533,  -3.0449136331124453,
  -2.0767524138093307,  -1.4943374062066672, 1.2614361861506413,  0.34590854351586797,
  -2.4155679891870063,  -1.7085260325168419, 1.2665554904392868,  -1.709528184785434,
];
const expected = {
  float32: [
    -0.14192505180835724, 0.9362121820449829,  -0.9896609783172607, -0.4419328272342682,
    0.9748437404632568,   0.8838226199150085,  0.9693697690963745,  -0.983249843120575,
    -0.9860090017318726,  -0.9953402876853943, -0.9767636656761169, -0.9957141876220703,
    -0.9508193135261536,  0.918006420135498,   0.9470077753067017,  -0.995478630065918,
    -0.969067394733429,   -0.9041197299957275, 0.8514595627784729,  0.3327420651912689,
    -0.9841713309288025,  -0.9364664554595947, 0.8528613448143005,  -0.9365896582603455,
  ],
};

// tests = [
//   inputShape,
// ];
const tests = [
  // 1D
  [24],
  // 2D
  [4, 6],
  // 3D
  [2, 3, 4],
  // 4D
  [4, 3, 2, 1],
  // 5D
  [2, 1, 1, 3, 4],
];

ExecutionArray.forEach(executionType => {
  const isSync = executionType === 'sync';
  if (self.GLOBAL.isWindow() && isSync) {
    return;
  }

  DeviceTypeArray.forEach(deviceType => {
    promise_setup(async () => {
      context = navigator.ml.createContext({deviceType});
      builder = new MLGraphBuilder(context);
    });

    OperandTypeArray.forEach(operandType => {
      promise_test(async () => {
        for (let i = 0; i < tests.length; i++ ) {
          await testTanh(operandType, isSync, inputData, expected, tests[i]);
        }
      }, `tanh / ${deviceType} / ${executionType} / ${operandType}`);
    });
  });
});