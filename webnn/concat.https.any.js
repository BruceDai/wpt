// META: title=test WebNN API concat operation
// META: global=window,dedicatedworker
// META: script=./resources/utils.js
// META: timeout=long

'use strict';

// https://webmachinelearning.github.io/webnn/#api-mlgraphbuilder-concat

const testConcat = async (operandType, syncFlag, ins, axis, expected) => {
  const inputs = [];
  const namedInputs = {};
  const TestTypedArray = TypedArrayDict[operandType];

  for (let i = 0; i < ins.length; i++) {
    inputs.push(builder.input('input' + i, {type: operandType, dimensions: ins[i][1]}));
    namedInputs['input' + i] = new TestTypedArray(ins[i][0]);
  }

  const output = builder.concat(inputs, axis);
  const outputs = {
    'output': new TestTypedArray(sizeOfShape(expected[1])),
  };
  let graph;

  if (syncFlag) {
    graph = builder.build({output});
    context.compute(graph, namedInputs, outputs);
  } else {
    graph = await builder.buildAsync({output});
    await context.computeAsync(graph, namedInputs, outputs);
  }

  assert_array_approx_equals_ulp(outputs.output, expected[0], PrecisionMetrics.ULP[operandType].concat, operandType);
};

// tests = [
//   [
//     [
//       [inputData, inputShape],
//     ],
//     [
//       [axis, [expectedData, expectedShape]],
//     ],
//   ],
// ];
const tests = [
  // two 1D inputs
  [
    [[[1, 2], [2]], [[3, 4], [2]]],
    [[0, [[1, 2, 3, 4], [4]]]],
  ],
  // three 1D inputs
  [
    [[[1, 2], [2]], [[3, 4], [2]], [[5, 6], [2]]],
    [[0, [[1, 2, 3, 4, 5, 6], [6]]]],
  ],
  // four 1D inputs
  [
    [[[1, 2], [2]], [[3, 4], [2]], [[5, 6], [2]], [[7, 8], [2]]],
    [[0, [[1, 2, 3, 4, 5, 6, 7, 8], [8]]]],
  ],
  // five 1D inputs
  [
    [[[1, 2], [2]], [[3, 4], [2]], [[5, 6], [2]], [[7, 8], [2]], [[9, 10], [2]]],
    [[0, [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [10]]]],
  ],
  // two 2D inputs
  [
    [[[1, 2], [1, 2]], [[3, 4, 5, 6], [2, 2]]],
    [[0, [[1, 2, 3, 4, 5, 6], [3, 2]]]],
  ],
  [
    [[[1, 2], [2, 1]], [[3, 4, 5, 6], [2, 2]]],
    [[1, [[1, 3, 4, 2, 5, 6], [2, 3]]]],
  ],
  [
    [[[1, 2, 3, 4], [2, 2]], [[5, 6, 7, 8], [2, 2]]],
    [
      [0, [[1, 2, 3, 4, 5, 6, 7, 8], [4, 2]]],
      [1, [[1, 2, 5, 6, 3, 4, 7, 8], [2, 4]]],
    ],
  ],
  // three 2D inputs
  [
    [[[1, 2], [1, 2]], [[3, 4, 5, 6], [2, 2]], [[7, 8, 9, 10, 11, 12], [3, 2]]],
    [[0, [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [6, 2]]]],
  ],
  [
    [[[1, 2], [2, 1]], [[3, 4, 5, 6], [2, 2]], [[7, 8], [2, 1]]],
    [[1, [[1, 3, 4, 7, 2, 5, 6, 8], [2, 4]]]],
  ],
  [
    [[[1, 2, 3, 4], [2, 2]], [[5, 6, 7, 8], [2, 2]], [[9, 10, 11, 12], [2, 2]]],
    [
      [0, [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [6, 2]]],
      [1, [[1, 2, 5, 6, 9, 10, 3, 4, 7, 8, 11, 12], [2, 6]]],
    ],
  ],
  // four 2D inputs
  [
    [[[1, 2], [1, 2]], [[3, 4, 5, 6], [2, 2]], [[7, 8, 9, 10, 11, 12], [3, 2]], [[13, 14, 15, 16], [2, 2]]],
    [[0, [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [8, 2]]]],
  ],
  [
    [[[1,2], [2, 1]],[[3, 4, 5, 6], [2, 2]], [[7, 8], [2, 1]], [[9, 10, 11, 12], [2, 2]]],
    [[1, [[1, 3, 4, 7, 9, 10, 2, 5, 6, 8, 11, 12], [2, 6]]]],
  ],
  [
    [[[1, 2, 3, 4], [2, 2]], [[5, 6, 7, 8], [2, 2]], [[9, 10, 11, 12], [2, 2]], [[13, 14, 15, 16], [2, 2]]],
    [
      [0, [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [8, 2]]],
      [1, [[1, 2, 5, 6, 9, 10, 13, 14, 3, 4, 7, 8, 11, 12, 15, 16], [2, 8]]],
    ],
  ],
  // five 2D inputs
  [
    [[[1, 2], [1, 2]], [[3, 4, 5, 6], [2, 2]], [[7, 8, 9, 10, 11, 12], [3, 2]], [[13, 14, 15, 16], [2, 2]], [[17, 18], [1, 2]]],
    [[0, [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [9, 2]]]],
  ],
  [
    [[[1,2], [2, 1]], [[3, 4, 5, 6], [2, 2]], [[7, 8], [2, 1]], [[9, 10, 11, 12], [2, 2]], [[13, 14], [2, 1]]],
    [[1, [[1, 3, 4, 7, 9, 10, 13, 2, 5, 6, 8, 11, 12, 14], [2, 7]]]],
  ],
  [
    [[[1, 2, 3, 4], [2, 2]], [[5, 6, 7, 8], [2, 2]], [[9, 10, 11, 12], [2, 2]], [[13, 14, 15, 16], [2, 2]], [[17, 18, 19, 20], [2, 2]]],
    [
      [0, [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [10, 2]]],
      [1, [[1, 2, 5, 6, 9, 10, 13, 14, 17, 18, 3, 4, 7, 8, 11, 12, 15, 16, 19, 20], [2, 10]]],
    ],
  ],
  // two 3D inputs
  [
    [[[1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 2]], [[9, 10, 11, 12, 13, 14, 15, 16], [2, 2, 2]]],
    [
      [0, [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [4, 2, 2]]],
      [1, [[1, 2, 3, 4, 9, 10, 11, 12, 5, 6, 7, 8, 13, 14, 15, 16], [2, 4, 2]]],
      [2, [[1, 2, 9, 10, 3, 4, 11, 12, 5, 6, 13, 14, 7, 8, 15, 16], [2, 2, 4]]],
    ]
  ],
  // three 3D inputs
  [
    [
      [[1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 2]],
      [[9, 10, 11, 12, 13, 14, 15, 16], [2, 2, 2]],
      [[17, 18, 19, 20, 21, 22, 23, 24], [2, 2, 2]],
    ],
    [
      [0,
        [[1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12,
          13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], [6, 2, 2]],
      ],
      [1,
        [[1, 2, 3, 4, 9,  10, 11, 12, 17, 18, 19, 20,
          5, 6, 7, 8, 13, 14, 15, 16, 21, 22, 23, 24], [2, 6, 2]],
      ],
      [2,
        [[1, 2, 9,  10, 17, 18, 3, 4, 11, 12, 19, 20,
          5, 6, 13, 14, 21, 22, 7, 8, 15, 16, 23, 24], [2, 2, 6]],
      ],
    ],
  ],
  // four 3D inputs
  [
    [
      [[1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 2]],
      [[9, 10, 11, 12, 13, 14, 15, 16], [2, 2, 2]],
      [[17, 18, 19, 20, 21, 22, 23, 24], [2, 2, 2]],
      [[25, 26, 27, 28, 29, 30, 31, 32], [2, 2, 2]],
    ],
    [
      [0,
        [[1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 16,
          17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [8, 2, 2]],
      ],
      [1,
        [[1, 2, 3, 4, 9,  10, 11, 12, 17, 18, 19, 20, 25, 26, 27, 28,
          5, 6, 7, 8, 13, 14, 15, 16, 21, 22, 23, 24, 29, 30, 31, 32], [2, 8, 2]],
      ],
      [2,
        [[1, 2, 9,  10, 17, 18, 25, 26, 3, 4, 11, 12, 19, 20, 27, 28,
          5, 6, 13, 14, 21, 22, 29, 30, 7, 8, 15, 16, 23, 24, 31, 32], [2, 2, 8]],
      ],
    ],
  ],
  // five 3D inputs
  [
    [
      [[1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 2]],
      [[9, 10, 11, 12, 13, 14, 15, 16], [2, 2, 2]],
      [[17, 18, 19, 20, 21, 22, 23, 24], [2, 2, 2]],
      [[25, 26, 27, 28, 29, 30, 31, 32], [2, 2, 2]],
      [[33, 34, 35, 36, 37, 38, 39, 40], [2, 2, 2]],
    ],
    [
      [0,
        [[1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 16,
          17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
          33, 34, 35, 36, 37, 38, 39, 40], [10, 2, 2]],
      ],
      [1,
        [[1,  2,  3,  4,  9,  10, 11, 12, 17, 18, 19, 20, 25, 26, 27, 28,
          33, 34, 35, 36, 5,  6,  7,  8,  13, 14, 15, 16, 21, 22, 23, 24,
          29, 30, 31, 32, 37, 38, 39, 40], [2, 10, 2]],
      ],
      [2,
        [[1,  2,  9,  10, 17, 18, 25, 26, 33, 34, 3,  4,  11, 12, 19, 20,
          27, 28, 35, 36, 5,  6,  13, 14, 21, 22, 29, 30, 37, 38, 7,  8,
          15, 16, 23, 24, 31, 32, 39, 40], [2, 2, 10]],
      ],
    ],
  ],
  // two 4D inputs
  [
    [
      [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [2, 2, 2, 2]],
      [[17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [2, 2, 2, 2]],
    ],
    [
      [0,
        [[1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 16,
          17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [4, 2, 2, 2]],
      ],
      [1,
        [[1, 2,  3,  4,  5,  6,  7,  8,  17, 18, 19, 20, 21, 22, 23, 24,
          9, 10, 11, 12, 13, 14, 15, 16, 25, 26, 27, 28, 29, 30, 31, 32], [2, 4, 2, 2]],
      ],
      [2,
        [[1, 2,  3,  4,  17, 18, 19, 20, 5,  6,  7,  8,  21, 22, 23, 24,
          9, 10, 11, 12, 25, 26, 27, 28, 13, 14, 15, 16, 29, 30, 31, 32], [2, 2, 4, 2]],
      ],
      [3,
        [[1, 2,  17, 18, 3,  4,  19, 20, 5,  6,  21, 22, 7,  8,  23, 24,
          9, 10, 25, 26, 11, 12, 27, 28, 13, 14, 29, 30, 15, 16, 31, 32], [2, 2, 2, 4]],
      ],
    ],
  ],
  // three 4D inputs
  [
    [
      [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [2, 2, 2, 2]],
      [[17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [2, 2, 2, 2]],
      [[33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], [2, 2, 2, 2]],
    ],
    [
      [0,
        [[1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 16,
          17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
          33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], [6, 2, 2, 2]],
      ],
      [1,
        [[1,  2,  3,  4,  5,  6,  7,  8,  17, 18, 19, 20, 21, 22, 23, 24,
          33, 34, 35, 36, 37, 38, 39, 40, 9,  10, 11, 12, 13, 14, 15, 16,
          25, 26, 27, 28, 29, 30, 31, 32, 41, 42, 43, 44, 45, 46, 47, 48], [2, 6, 2, 2]],
      ],
      [2,
        [[1,  2,  3,  4,  17, 18, 19, 20, 33, 34, 35, 36, 5,  6,  7,  8,
          21, 22, 23, 24, 37, 38, 39, 40, 9,  10, 11, 12, 25, 26, 27, 28,
          41, 42, 43, 44, 13, 14, 15, 16, 29, 30, 31, 32, 45, 46, 47, 48], [2, 2, 6, 2]],
      ],
      [3,
        [[1,  2,  17, 18, 33, 34, 3,  4,  19, 20, 35, 36, 5,  6,  21, 22,
          37, 38, 7,  8,  23, 24, 39, 40, 9,  10, 25, 26, 41, 42, 11, 12,
          27, 28, 43, 44, 13, 14, 29, 30, 45, 46, 15, 16, 31, 32, 47, 48], [2, 2, 2, 6]],
      ],
    ],
  ],
  // four 4D inputs
  [
    [
      [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [2, 2, 2, 2]],
      [[17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [2, 2, 2, 2]],
      [[33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], [2, 2, 2, 2]],
      [[49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64], [2, 2, 2, 2]],
    ],
    [
      [0,
        [[1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 16,
          17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
          33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
          49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64], [8, 2, 2, 2]],
      ],
      [1,
        [[1,  2,  3,  4,  5,  6,  7,  8,  17, 18, 19, 20, 21, 22, 23, 24,
          33, 34, 35, 36, 37, 38, 39, 40, 49, 50, 51, 52, 53, 54, 55, 56,
          9,  10, 11, 12, 13, 14, 15, 16, 25, 26, 27, 28, 29, 30, 31, 32,
          41, 42, 43, 44, 45, 46, 47, 48, 57, 58, 59, 60, 61, 62, 63, 64], [2, 8, 2, 2]],
      ],
      [2,
        [[1,  2,  3,  4,  17, 18, 19, 20, 33, 34, 35, 36, 49, 50, 51, 52,
          5,  6,  7,  8,  21, 22, 23, 24, 37, 38, 39, 40, 53, 54, 55, 56,
          9,  10, 11, 12, 25, 26, 27, 28, 41, 42, 43, 44, 57, 58, 59, 60,
          13, 14, 15, 16, 29, 30, 31, 32, 45, 46, 47, 48, 61, 62, 63, 64], [2, 2, 8, 2]],
      ],
      [3,
        [[1,  2,  17, 18, 33, 34, 49, 50, 3,  4,  19, 20, 35, 36, 51, 52,
          5,  6,  21, 22, 37, 38, 53, 54, 7,  8,  23, 24, 39, 40, 55, 56,
          9,  10, 25, 26, 41, 42, 57, 58, 11, 12, 27, 28, 43, 44, 59, 60,
          13, 14, 29, 30, 45, 46, 61, 62, 15, 16, 31, 32, 47, 48, 63, 64], [2, 2, 2, 8]],
      ],
    ],
  ],
  // five 4D inputs
  [
    [
      [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [2, 2, 2, 2]],
      [[17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32], [2, 2, 2, 2]],
      [[33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], [2, 2, 2, 2]],
      [[49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64], [2, 2, 2, 2]],
      [[65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80], [2, 2, 2, 2]],
    ],
    [
      [0,
        [[1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 16,
          17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
          33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
          49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
          65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80], [10, 2, 2, 2]],
      ],
      [1,
        [[1,  2,  3,  4,  5,  6,  7,  8,  17, 18, 19, 20, 21, 22, 23, 24,
          33, 34, 35, 36, 37, 38, 39, 40, 49, 50, 51, 52, 53, 54, 55, 56,
          65, 66, 67, 68, 69, 70, 71, 72, 9,  10, 11, 12, 13, 14, 15, 16,
          25, 26, 27, 28, 29, 30, 31, 32, 41, 42, 43, 44, 45, 46, 47, 48,
          57, 58, 59, 60, 61, 62, 63, 64, 73, 74, 75, 76, 77, 78, 79, 80], [2, 10, 2, 2]],
      ],
      [2,
        [[1,  2,  3,  4,  17, 18, 19, 20, 33, 34, 35, 36, 49, 50, 51, 52,
          65, 66, 67, 68, 5,  6,  7,  8,  21, 22, 23, 24, 37, 38, 39, 40,
          53, 54, 55, 56, 69, 70, 71, 72, 9,  10, 11, 12, 25, 26, 27, 28,
          41, 42, 43, 44, 57, 58, 59, 60, 73, 74, 75, 76, 13, 14, 15, 16,
          29, 30, 31, 32, 45, 46, 47, 48, 61, 62, 63, 64, 77, 78, 79, 80], [2, 2, 10, 2]],
      ],
      [3,
        [[1,  2,  17, 18, 33, 34, 49, 50, 65, 66, 3,  4,  19, 20, 35, 36,
          51, 52, 67, 68, 5,  6,  21, 22, 37, 38, 53, 54, 69, 70, 7,  8,
          23, 24, 39, 40, 55, 56, 71, 72, 9,  10, 25, 26, 41, 42, 57, 58,
          73, 74, 11, 12, 27, 28, 43, 44, 59, 60, 75, 76, 13, 14, 29, 30,
          45, 46, 61, 62, 77, 78, 15, 16, 31, 32, 47, 48, 63, 64, 79, 80], [2, 2, 2, 10]],
      ],
    ],
  ],
];
let context;
let builder;

ExecutionArray.forEach(executionType => {
  const isSync = executionType === 'sync';
  if (self.GLOBAL.isWindow() && isSync) {
    return;
  }

  DeviceTypeArray.forEach(deviceType => {
    promise_setup(async () => {
      context = navigator.ml.createContext({deviceType});
      builder = new MLGraphBuilder(context);
    });

    OperandTypeArray.forEach(operandType => {
      promise_test(async () => {
        for (let i = 0; i < tests.length; i++) {
          const results = tests[i][1];
          for (let j = 0; j < results.length; j++) {
            await testConcat(operandType, isSync, tests[i][0], results[j][0], results[j][1]);
          }
        }
      }, `test concat / ${deviceType} / ${executionType} / ${operandType}`);
    });
  });
});